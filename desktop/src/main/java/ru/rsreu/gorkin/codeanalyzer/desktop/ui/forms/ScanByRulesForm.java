package ru.rsreu.gorkin.codeanalyzer.desktop.ui.forms;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import ru.rsreu.gorkin.codeanalyzer.core.rules.RulesFacade;
import ru.rsreu.gorkin.codeanalyzer.core.rules.ValidationResult;
import ru.rsreu.gorkin.codeanalyzer.core.syntaxelements.SourceCodeUnit;
import ru.rsreu.gorkin.codeanalyzer.desktop.ui.elements.files.JSONFilesChooser;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.function.Supplier;

public class ScanByRulesForm {
    private JPanel parentPanel;
    private JButton rulesFileChooserButton;
    private JTextArea resultsArea;
    private JButton checkProjectButton;
    private JLabel selectedRulesFile;

    private String rulesJsonFileContent;

    private Supplier<List<SourceCodeUnit>> projectStructureSupplier;


    public ScanByRulesForm() {
        rulesFileChooserButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JSONFilesChooser jsonFilesChooser = new JSONFilesChooser();
                int returnVal = jsonFilesChooser.showOpenDialog(null);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    File file = jsonFilesChooser.getSelectedFile();
                    try {
                        rulesJsonFileContent = Files.readString(Path.of(file.getPath()));
                        RulesFacade rulesFacade = new RulesFacade();
                        selectedRulesFile.setText(file.getName());
                        List<ValidationResult> validationResults = rulesFacade.validate(rulesJsonFileContent, projectStructureSupplier.get());
                        StringBuilder stringBuilder = new StringBuilder();
                        for (ValidationResult validationResult : validationResults) {
                            if (!validationResult.isNormal()) {
                                stringBuilder.append(validationResult.getDescription())
                                        .append("\n");
                            }
                        }
                        resultsArea.setText(stringBuilder.toString());
                    } catch (IOException ioException) {
                        ioException.printStackTrace();
                    }
                }
            }
        });
    }

    public void setProjectStructureSupplier(Supplier projectStructureSupplier) {
        this.projectStructureSupplier = projectStructureSupplier;
    }

    public JPanel getParentPanel() {
        return parentPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        parentPanel = new JPanel();
        parentPanel.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        rulesFileChooserButton = new JButton();
        rulesFileChooserButton.setText("Выбрать пользовательские правила");
        parentPanel.add(rulesFileChooserButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        checkProjectButton = new JButton();
        checkProjectButton.setText("Проверить");
        parentPanel.add(checkProjectButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        selectedRulesFile = new JLabel();
        selectedRulesFile.setText("Файл не выбран");
        parentPanel.add(selectedRulesFile, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        parentPanel.add(scrollPane1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        resultsArea = new JTextArea();
        scrollPane1.setViewportView(resultsArea);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return parentPanel;
    }
}
